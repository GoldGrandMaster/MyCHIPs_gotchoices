#Schema for storing MyCHIPs tallies
#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
#TODO:
#- Record units' sign relative to our holder's interest (asset/liability)?
#- Split out separate function for chits_notify_user()?
#- Update chain_conf field in mychips.tallies when checksum confirmed with other half
#- Test for scenario in notes: Mar 28, 2020; skipped over chits from network discontinuity
#- Failed lift chits get set to void
#- Good status check includes validating actual digital signature (or done by agents)?
#- Each chit needs the signature of the party sending value (depends on the sign of units)
#- Do we need strict state transition rules for status and request as in tallies.wms?
#- 
module mychips
require config.tcl trigview.tcl

namespace eval chits {
    def chits_pk	{chit_ent chit_seq chit_idx}
    def chits_v_up	{request signature units reference memo}
    def chits_v_in	[concat chit_ent chit_seq $chits_v_up chit_uuid chit_type issuer]
    def chits_se	[concat chit_ent chit_seq chit_idx $chits_v_up chit_uuid chit_type issuer $glob::stampfn chit_date chain_send chain_idx chain_hash chain_prev lift_seq status digest]
}

table mychips.chits {mychips.tallies mychips.lifts tally_side} {
    chit_ent	text
  , chit_seq	int	      , foreign key (chit_ent, chit_seq) references mychips.tallies on update cascade on delete cascade
  , chit_idx	int	      , primary key (chit_ent, chit_seq, chit_idx)

-- Values directly contained in the external chit representation
  , chit_uuid	uuid		not null, constraint "!mychips.chits:CUU" unique (chit_ent,chit_seq,chit_uuid)
  , chit_type	text		not null default 'tran' constraint "!mychips.chits:BCT" check(chit_type in ('lift','tran','set'))
  , chit_date	timestamptz	not null default current_timestamp
  , issuer	tally_side	not null default 'foil'
  , units	bigint		constraint "!mychips.chits:CUN" check(units >= 0 and chit_type in ('lift','tran') or units isnull and chit_type = 'set')
  , reference	jsonb
  , memo	text
  , digest	bytea		
  , signature	text		constraint "!mychips.chits:GDS" check(status != 'good' or 
                                  (request isnull and not signature isnull) or 
                                  (request isnull and chit_type = 'lift'))

-- Values used internally to track state, required actions
  , request	text	        constraint "mychips.chits.BRQ" check (request is null or request in ('pend','good','void'))
  , status	text		not null default 'draft' constraint "!mychips.chits:BST" check(status in ('draft','pend','good','void'))
  , chain_hash	bytea
  , chain_prev	bytea
  , chain_idx	int	      , unique(chit_ent, chit_seq, chain_idx)
  , chain_send	jsonb
  , lift_seq	int           , foreign key (chit_uuid, lift_seq) references mychips.lifts (lift_uuid, lift_seq) on update cascade on delete cascade
  , constraint "!mychips.chits:BLL" check (chit_type = 'lift' and not lift_seq isnull or chit_type != 'lift' and lift_seq isnull)
    eval(s $glob::stamps)
}
index {} mychips.chits chit_uuid
index {} mychips.chits chit_type
index {} mychips.chits chit_date
index {} mychips.chits status

table mychips.chit_tries {mychips.chits} {
    ctry_ent	text	      , primary key (ctry_ent, ctry_seq, ctry_idx)
  , ctry_seq	int
  , ctry_idx	int	      , foreign key (ctry_ent, ctry_seq, ctry_idx) references mychips.chits on update cascade on delete cascade
  , tries	int		not null default 1
  , last	timestamptz	not null default current_timestamp
}

# Generate unique sequence for new chit
#----------------------------------------------------------------
function mychips.chits_tf_seq() {mychips.tallies mychips.chit_goodcheck(mychips.chits)} {
  returns trigger language plpgsql security definer as $$
    begin
      if new.chit_idx is null then			-- update should lock the mychips.tallies row until transaction completes
        update mychips.tallies set _last_chit = greatest(
            coalesce(_last_chit,0) + 1,
            (select coalesce(max(chit_idx),0)+1 from mychips.chits where chit_ent = new.chit_ent and chit_seq = new.chit_seq)
          ) where tally_ent = new.chit_ent and tally_seq = new.chit_seq
            returning _last_chit into new.chit_idx;
        if not found then new.chit_idx = 1; end if;
-- select into new.chit_idx coalesce(max(chit_idx),0)+1 from mychips.chits where chit_ent = new.chit_ent and chit_seq = new.chit_seq; -- Not safe for concurrent sessions
      end if;
      if new.units < 0 then			-- Interpret negative units as meaning stock-issued
        new.units = -new.units;
        new.issuer = 'stock';
      end if;

      if new.request = 'pend' then		-- User is drafting
        new.status = 'draft';
      elsif new.request = 'good' then		-- User is sending good pledge
        new.status = 'pend';
        return mychips.chit_goodcheck(new);	-- Need chit to be chained before we transmit it

      elsif new.status = 'good' then		-- A signed chit from peer can come in marked as good
        return mychips.chit_goodcheck(new);	-- May double-check certain chits (will check in goodcheck)
      end if;
      return new;
    end;
$$;}
trigger mychips_chits_tr_seq {} {
    before insert on mychips.chits for each row execute procedure mychips.chits_tf_seq();
}

# Before updating each chit record
#----------------------------------------------------------------
function mychips.chits_tf_bu() {mychips.chit_goodcheck(mychips.chits)} {
  returns trigger language plpgsql security definer as $$
    begin
      if new.status != old.status then			-- Check for valid state transitions
        if not (
          new.status in ('draft','pend') and old.status in ('draft','pend') or
          new.status = 'pend' and old.status = 'void' or
          new.status in ('void','good') and old.status = 'pend' or
          new.status = 'reproc'
        ) then raise exception '!mychips.chits:IST % %', old.status, new.status;
        end if;
      end if;

      if new.request = 'pend' then		-- User is drafting/re-drafting
        new.status = 'draft';
      elsif new.request = 'good' then		-- User is sending good pledge
        new.status = 'pend';
        return mychips.chit_goodcheck(new);
      elsif new.status = 'good' and old.status != 'good' then	-- Received good chit
        return mychips.chit_goodcheck(new);
      elsif new.status = 'reproc' then		-- Need to reorder this chit in the chain
        new.status = 'good';
        return mychips.chit_goodcheck(new);
      end if;
      return new;
    end;
$$;}
trigger mychips_chits_tr_bu {} {
    before update on mychips.chits for each row execute procedure mychips.chits_tf_bu();
}

# Cache tally totals when the chits change
#----------------------------------------------------------------
function mychips.chits_tf_cache() {mychips mychips.chits_v} {
  returns trigger language plpgsql security definer as $$
    declare
      trec	record;
--      crec	record;
    begin
--raise notice 'Updating tally cache: %-%', trec.chit_ent, trec.chit_seq;
      if TG_OP = 'DELETE' then trec = old; else trec = new; end if;

-- Not sure which if one of these approaches is more efficient:
--      select into crec sum(net_g) as net_g, sum(net_p) as net_p from mychips.chits_v where chit_ent = trec.chit_ent and chit_seq = trec.chit_seq;
--      update mychips.tallies set mod_date = current_timestamp, mod_by = session_user, net_c = coalesce(crec.net_g,0), net_pc = coalesce(crec.net_p,0) where tally_ent = trec.chit_ent and tally_seq = trec.chit_seq;
-- Or:
      update mychips.tallies set 	-- mod_date = current_timestamp, mod_by = session_user, 
        net_c = coalesce(cs.sum_g,0), net_pc = coalesce(cs.sum_p,0) from (
          select sum(net_g) as sum_g, sum(net_p) as sum_p
          from mychips.chits_v where chit_ent = trec.chit_ent and chit_seq = trec.chit_seq
        ) as cs
          where	tally_ent = trec.chit_ent and tally_seq = trec.chit_seq;

      return null;
    end;
$$;}
trigger mychips_chits_tr_cache {} {
    after insert or update or delete on mychips.chits for each row execute procedure mychips.chits_tf_cache();
}

# Quality check for a chit as it goes into status: good
#----------------------------------------------------------------
function {mychips.chit_goodcheck(ch mychips.chits)} {
  mychips.chit_json_h(mychips.chits,mychips.tallies)
  mychips.chits_v
  mychips.j2h(jsonb)
} {
  returns mychips.chits language plpgsql security definer as $$
    declare
      trec	mychips.tallies;
      settings	jsonb;
    begin

      if ch.chit_type != 'lift' and ch.signature isnull then	-- Fixme: check actual signature validity?
        raise exception '!mychips.chits:MIS %-%', ch.chit_ent, ch.chit_seq;
      end if;
      
      if ch.chain_prev notnull then return ch; end if;		-- Already processed/chained this chit

      select into trec * from mychips.tallies where tally_ent = ch.chit_ent and tally_seq = ch.chit_seq;
      if not found or trec.digest isnull then		-- Can we find the valid tally the chit belongs to?
        raise exception '!mychips.chits:LIT %-%-%', trec.tally_ent, trec.tally_seq, trec.tally_type;
        return null;
      end if;

      if ch.chit_type = 'set' then			-- Apply tally settings
        settings = ch.reference;
        update mychips.tallies set
          hold_sets = hold_sets || case when ch.issuer = trec.tally_type then settings else '{}' end,		-- Merge settings
          part_sets = part_sets || case when ch.issuer = trec.tally_type then '{}' else settings end,
          target = coalesce((settings->>'target')::bigint, target), 		-- Update cached trading variables
          bound  = coalesce((settings->>'bound')::bigint,  bound),
          reward = coalesce((settings->>'reward')::float,  reward), 
          clutch = coalesce((settings->>'clutch')::float,  clutch), 
          status = case when status = 'open' and (settings->'close')::boolean then 'close' else status end	-- Enact any close request
        where tally_ent = trec.tally_ent and tally_seq = trec.tally_seq;
      end if;

      ch.digest = mychips.j2h(mychips.chit_json_c(ch, trec));	-- Hash that the issuer signs
      return mychips.chain_consense(ch, trec);
    end;
$$;}

# Notify the peer server process of chit state changes that need attention in the database
#----------------------------------------------------------------
function {mychips.chit_notify_agent(chit mychips.chits)} {mychips.users_v mychips.chits_v mychips.tallies_v mychips.chit_tries} {
  returns boolean language plpgsql security definer as $$
    declare
        channel	text	= 'mychips_agent';
        jrec	jsonb;			-- Holds notify record
        trec	record;			-- Talley
        rrec	record;			-- Retries
    begin
        select into trec tally_uuid,hold_chad,hold_agent,part_chad from mychips.tallies_v where tally_ent = chit.chit_ent and tally_seq = chit.chit_seq;
        if not trec.hold_agent is null then
            channel = 'ma_' || trec.hold_agent;
        end if;
        insert into mychips.chit_tries (ctry_ent, ctry_seq, ctry_idx) values (chit.chit_ent, chit.chit_seq, chit.chit_idx)
          on conflict (ctry_ent,ctry_seq,ctry_idx) do update set tries = mychips.chit_tries.tries + 1, last = current_timestamp
            returning * into rrec;
        
        jrec = jsonb_build_object(
          'target',	'chit',
          'action',	chit.request,
          'try',	rrec.tries,
          'last',	rrec.last,
          'to',		trec.part_chad,
          'from',	trec.hold_chad,
          'object',	(select json from mychips.chits_v where chit_ent = chit.chit_ent and chit_seq = chit.chit_seq and chit_idx = chit.chit_idx)
        );
--raise notice 'Chit notice:% R:% O:% P:% C:% U:%', channel, chit.request, chit.chit_ent, trec.part_chad->>'cid', chit.chit_uuid, chit.units;
        perform pg_notify(channel, jrec::text);
        return true;
    end;
$$;}

# Generate notifications about updated chits for listening peer servers
#----------------------------------------------------------------
function mychips.chits_tf_notify() {mychips.chits mychips.chit_notify_agent(mychips.chits)} {
  returns trigger language plpgsql security definer as $$
    declare
        dirty	boolean default false;
    begin
        if TG_OP = 'INSERT' and not new.request isnull then
            dirty = true;
        elsif (not new.request isnull) and (new.request is distinct from old.request) then
            dirty = true;
        end if;
raise notice 'Chit update:% send:%', dirty, new.chain_send;
        if dirty then				-- Communicate chit message
          perform mychips.chit_notify_agent(new);
        end if;

        if new.chain_send notnull then		-- Communicate consensus message
          perform mychips.chain_notify_agent(new);
        end if;
        return new;
    end;
$$;}
trigger mychips_chits_tr_notice {} {
    after insert or update on mychips.chits for each row execute procedure mychips.chits_tf_notify();
}

# Compute current state of this chit
#----------------------------------------------------------------
function {mychips.chit_state(isdebit boolean, status text, request text)} {mychips} {
  returns text immutable language sql as $$
    select
      case when isdebit then 'A.' else 'L.' end ||
      status ||
      case when request isnull then '' else '.' || request end;
$$;}

# Compute core chit json that will be signed/validated
#----------------------------------------------------------------
function {mychips.chit_json_c(ch mychips.chits, ta mychips.tallies)} {mychips.chits mychips.tallies} {
  returns jsonb stable language sql as $$
    select jsonb_strip_nulls(jsonb_build_object(
      'tally',		ta.tally_uuid,
      'by',		ch.issuer,
      'type',		ch.chit_type,
      'uuid',		ch.chit_uuid,
      'date',		ch.chit_date,
      'units',		ch.units,
      'ref',		ch.reference,
      'memo',		ch.memo
    ))
$$;}

# Compute chit json to be hashed for chit chains
#----------------------------------------------------------------
function {mychips.chit_json_h(ch mychips.chits, ta mychips.tallies)} {mychips.chit_json_c(mychips.chits,mychips.tallies)} {
  returns jsonb stable language sql as $$
    select mychips.chit_json_c(ch, ta) || jsonb_strip_nulls(jsonb_build_object(
      'index',		ch.chain_idx,
      'prior',		ch.chain_prev,
      'signed',		ch.signature
    ))
$$;}

# Compute chit json to be passed in dialogs
#----------------------------------------------------------------
function {mychips.chit_json_r(ch mychips.chits, ta mychips.tallies)} {mychips.chit_json_c(mychips.chits,mychips.tallies)} {
  returns jsonb stable language sql as $$
    select mychips.chit_json_c(ch, ta) || jsonb_strip_nulls(jsonb_build_object(
      'digest',		ch.digest,
      'signed',		ch.signature,
      'index',		ch.chain_idx,
      'chain',		ch.chain_hash
    ))
$$;}

# Base view of chits
#----------------------------------------------------------------
#define isdebit {te.tally_type = 'stock' and ch.units >= 0 or te.tally_type = 'foil' and ch.units < 0}
define isdebit {ch.issuer != te.tally_type}
define uSign {case when ch.issuer = te.tally_type then -(%1) else (%1) end}
view mychips.chits_v {
  mychips.chits mychips.tallies
  mychips.chit_state(boolean,text,text)
  mychips.chit_cstate(mychips.chits,mychips.tallies)
  mychips.chit_json_h(mychips.chits,mychips.tallies)
  mychips.chit_json_r(mychips.chits,mychips.tallies)
  mychips.j2h(jsonb)
} {select 
    eval(fld_list $chits::chits_se	ch)
  , te.hold_cid
  , te.part_cid
  , te.tally_type
  , te.tally_uuid
  , te.chain_conf

  , uSign(ch.units)							as net
  , case when ch.status = 'good' then uSign(ch.units) else 0 end	as net_g
  , case when ch.status = 'void' then 0 else uSign(ch.units) end	as net_p

  , mychips.chit_cstate(ch, te)					as cstate
  , mychips.chit_state(isdebit(), ch.status, ch.request)	as state
  , mychips.chit_state(isdebit(), ch.status, ch.request) = any(array['L.pend']) as action
  , mychips.chit_json_c(ch, te)					as json_core
  , mychips.chit_json_r(ch, te)					as json
  , mychips.j2h(mychips.chit_json_h(ch, te))			as hash_v
  , mychips.j2h(mychips.chit_json_h(ch, te)) = coalesce(ch.chain_hash,'') as clean

    from	mychips.chits	ch
    join	mychips.tallies	te on te.tally_ent = ch.chit_ent and te.tally_seq = ch.chit_seq;

    eval(trigview::insert mychips.chits_v mychips.chits $chits::chits_v_in $chits::chits_pk [concat $glob::stampin]);
    eval(trigview::update mychips.chits_v mychips.chits $chits::chits_v_up $chits::chits_pk $glob::stampup);
} -grant {
    {chit	{s} {i u} {d}}
}

# User view of chits
#----------------------------------------------------------------
view mychips.chits_v_me {mychips.chits_v mychips.tallies_v_me} {select 
    c.*
    from	mychips.chits_v c
    join	mychips.tallies_v_me t on c.chit_ent = t.tally_ent and c.chit_seq = t.tally_seq
} -grant {
    {chit	{s} {s i u} {d}}
}

# Process chit state transitions requested by the peer server process
#----------------------------------------------------------------
function {mychips.chit_process(msg jsonb, recipe jsonb)} {
  mychips.users_v
  mychips.chits_v
  mychips.chain_process(jsonb,jsonb)
} {
  returns text language plpgsql as $$
    declare
      cid	text	= msg->'to'->>'cid';
      agent	text	= msg->'to'->>'agent';
      obj	jsonb	= msg->'object';
      uuid	uuid	= obj->>'uuid';
      curState	text;
      qstrg	text;			-- Temporary string
      trec	record;			-- Holds associated tally
      crec	record;			-- Holds chit record(s)
      erec	record;			-- Tally entity, we will ignore the one in msg
      jrec	jsonb;
    begin
      if msg->>'action' = 'chain' then		-- Chaining has its own handler
        return mychips.chain_process(msg,recipe);
      end if;

raise notice 'Chit top cid:% obj:%', cid, obj;
      select into trec tally_ent, tally_seq, tally_type from mychips.tallies_v where hold_cid = cid and tally_uuid = (obj->>'tally')::uuid;
      if not found then return null; end if;

      select into crec chit_ent, chit_seq, chit_idx, state from mychips.chits_v where chit_ent = trec.tally_ent and chit_uuid = uuid;
      curState = crec.state;
--raise notice 'Chit cid:% entity:% state:% recipe:%', cid, crec.chit_ent, curState, recipe;
      if not found then
        curState = 'null';		-- Special code for when the specified chit doesn't exist yet
      end if;

      if not (jsonb_build_array(curState) <@ (recipe->'context')) then	--Not in any applicable state (listed in our recipe context)
--raise notice 'Z:% C:%', jsonb_build_array(curState), recipe->'context';
        return curState;
      end if;

      if recipe ? 'upsert' then
--raise notice '  upsert curState:% obj:%', curState, obj;
        if curState = 'null' then			-- Need to do insert
          insert into mychips.chits (
            chit_ent,chit_seq,chit_uuid,chit_type,chit_date,status,
            signature,issuer,units,reference,memo,chain_hash,chain_idx		--,chain_prev
          ) values (
            trec.tally_ent, trec.tally_seq, uuid, obj->>'type', (obj->>'date')::timestamptz,
            coalesce(recipe->'upsert'->>'status','pend'),
            obj->>'signed', (obj->>'by')::tally_side, (obj->>'units')::bigint, 
            obj->'ref', obj->>'memo', (obj->>'chain')::bytea,(obj->>'index')::int	--, (obj->>'prior')::bytea
          ) returning chit_ent, chit_seq, chit_idx, chain_hash into crec;
--raise notice '  post-insert:% % %', trec.tally_type, obj->'index', crec;
        else						-- Chit already exists, do update
          update mychips.chits set signature = obj->>'signed', 
            issuer = (obj->>'by')::tally_side, units = (obj->>'units')::bigint,
            status = coalesce(recipe->'upsert'->>'status','pend'),
            reference = obj->'ref', memo = obj->>'memo', chain_hash = (obj->>'chain')::bytea, chain_idx = (obj->>'index')::int,
            request = null, mod_date = current_timestamp, mod_by = session_user
            where chit_ent = crec.chit_ent and chit_seq = crec.chit_seq and chit_idx = crec.chit_idx;

          delete from mychips.chit_tries where ctry_ent = crec.chit_ent and ctry_seq = crec.chit_seq and ctry_idx = crec.chit_idx;
        end if;
      end if;

      if recipe ? 'update' then			-- There's an update key in the recipe
        qstrg = mychips.state_updater(recipe, 'mychips.chits', '{status, signature}');
--raise notice 'chit_process SQL:% % % %', qstrg, crec.chit_ent, crec.chit_seq, crec.chit_idx;
        execute qstrg || ' chit_ent = $1 and chit_seq = $2 and chit_idx = $3' using crec.chit_ent, crec.chit_seq, crec.chit_idx;
        delete from mychips.chit_tries where ctry_ent = crec.chit_ent and ctry_seq = crec.chit_seq and ctry_idx = crec.chit_idx;
      end if;

      select into crec chit_ent,chit_seq,chit_idx,chit_uuid,state,action,json from mychips.chits_v where chit_ent = crec.chit_ent and chit_seq = crec.chit_seq and chit_idx = crec.chit_idx;
      if crec.action or (crec.state is distinct from curState) then	-- Also notify if changed state
        jrec = jsonb_build_object(
          'target',	'chit',
          'entity',	crec.chit_ent,
          'sequence',	crec.chit_seq,
          'index',	crec.chit_idx,
          'state',	crec.state,
          'object',	crec.json
        );
--raise notice '  chit notify user: mychips_user_% % %', crec.chit_ent, crec.chit_uuid, jrec::text;
        perform pg_notify('mu_' || crec.chit_ent, jrec::text);
--Fixme: Should this return the whole jrec?
        perform pg_notify('mychips_user', crec.json::text);		-- Simulations use this
      end if;
      return crec.state;
--      return crec.json;
    end;
$$;}

# Recursive view of chit chains to test integrity of each chain
#----------------------------------------------------------------
view mychips.chits_v_chains {mychips.chits_v mychips.tallies_v} {
  with recursive chit_chain(ent, seq, chain_idx, chain_prev, chain_hash, chain_conf, prev_ok, hash_ok, length, uuids, cycle) as (
    select	t.tally_ent, t.tally_seq, 0::int, null::bytea, t.digest, t.chain_conf, true, 
      t.digest_v = t.digest, 0::int, array[t.tally_uuid], false
    from	mychips.tallies_v t
  union all
    select c.chit_ent					as ent
      , c.chit_seq					as seq
      , c.chain_idx					as chain_idx
      , c.chain_prev					as chain_prev
      , c.chain_hash					as chain_hash
      , cc.chain_conf					as chain_conf
      , cc.prev_ok and (c.chain_prev = cc.chain_hash)	as prev_ok
      , cc.hash_ok and (c.hash_v = c.chain_hash)	as hash_ok
      , cc.length + 1					as length
      , cc.uuids || c.chit_uuid				as uuids
      , c.chit_uuid = any(cc.uuids)			as cycle
    from	chit_chain	cc
    join	mychips.chits_v	c on c.chit_ent = cc.ent and c.chit_seq = cc.seq and c.chain_idx = cc.chain_idx + 1
  ) select
    ccc.ent
  , ccc.seq
  , ccc.chain_idx
  , ccc.chain_prev
  , ccc.chain_hash
  , ccc.chain_conf
  , ccc.prev_ok
  , ccc.hash_ok
  , ccc.prev_ok and ccc.hash_ok as ok
  , ccc.chain_idx = cm.max as last
  , ccc.length
  , ccc.uuids
  from chit_chain ccc		-- where ccc.length > 1
  join (
    select chit_ent,chit_seq,max(chain_idx) as max from mychips.chits group by 1,2
  ) cm on cm.chit_ent = ccc.ent and cm.chit_seq = ccc.seq
}
