#Copyright MyCHIPs.org; See license in root of this package
#----------------------------------------------------------------
tabtext mychips.routes	{Foreign Routes}	{Information collected from other servers about foreign peers that can be reached by way of established tallies} {
    {rid		{Route ID}		{A unique integer assigned by the system to identify each route record}}
    {via_ent		{Route Entity}		{The ID of a local entity who owns the tally this route starts on}}
    {via_tseq		{Route Tally}		{Sequence number of the tally this route begins on}}
    {dst_cid		{Destination CHIP ID}	{The CHIP identifier for the entity this route leads to}}
    {dst_agent		{Destination Agent}	{The agent address for the entity this route leads to}}
    {req_ent		{Requester}		{The ID of the local entity through which this route request originated (also where to return query results to)}}
    {req_tseq		{Requester Tally}	{The sequence number of the tally the route request came over (leave null for local queries)}}
    {status		{Status} 		{Indicates whether this route is useable or if not, what progress is being made to discover such a route} {
        {draft		{Draft}			{The route has been requested but not yet checked or propagated upstream}}
        {pend		{Pending}		{A request has been made upstream to discover this route but no further status is yet known locally}}
        {good		{Good}			{The upstream peer server has answered that this route is possible}}
        {none		{None}			{The upstream peer server has answered that this route is not possible}}
    }}
    {step		{Step}			{How many steps we are along the way from where this route request was originated}}
    {lift_count		{Use Count}		{A counter that is incremented each time this path is used in a lift}}
    {lift_date		{Last Used}		{The date/time this path was last used in a lift}}
    {good_date		{Date Found}		{The date/time this path was last marked as good by an upstream foreign server}}
    {min		{Lift Minimum}		{The most we can expect to lift along this route without pushing foils past their target setting}}
    {max		{Lift Maximum}		{The most we can expect to lift along this route, which might incur an extra transaction fee}}
    {margin		{Lift Margin}		{The fee ratio we can expect to move any lift transaction along this route}}
    {reward		{Lift Reward}		{An additional fee ratio we can expect to move lifts beyond the Lift Minimum amount}}
} -messages {
    {BST	{Bad Route Status}		{Not a valid status for the route status}}
    {UNI	{Not Unique Route}		{Routes should have a unique combination of source and destination}}
    {CRL        {Illegal Route Target}          {Routes should be only to users on other systems}}
    {LMG	{Illegal Margin}		{The margin must be specified between -1 and 1}}
    {LRW	{Illegal Reward}		{The reward must be specified between -1 and 1}}
}

tabtext mychips.routes_v	{Foreign Routes}	{A view showing foreign peers that can be reached by way of one of our known foreign peers} {
    {via_cid		{Route Via CHIP ID}	{CHIP ID of the owner of the tally the route starts on}}
    {via_agent		{Route Via Agent}	{Agent address for the owner of the tally the route starts on}}
    {via_chad		{Route Via Address}	{Full JSON CHIP address for the owner of the tally the route starts on}}
    {via_tally		{Route Via Tally}	{ID of the tally the route starts on}}
    {vip_cid		{Route Partner CHIP ID}	{CHIP ID of the foreign partner on the tally the route starts on}}
    {vip_agent		{Route Partner Agent}	{Agent address for the foreign partner on the tally the route starts on}}
    {vip_chad		{Route Partner Address}	{Full JSON CHIP address for the foreign partner on the tally the route starts on}}

    {req_cid		{Request CHIP ID}	{CHIP ID of the owner of the tally the route is requested through}}
    {req_agent		{Request Agent}		{Agent address for the owner of the tally the route is requested through}}
    {req_chad		{Request Address}	{Full JSON CHIP address for the owner of the tally the route is requested through}}
    {req_tally		{Request Tally}		{ID of the tally the route is requested through (or null for local requests)}}
    {rpt_cid		{Req Partner CHIP ID}	{CHIP ID of the foreign partner on the tally the route is requested through}}
    {rpt_agent		{Req Partner Agent}	{Agent address for the foreign partner on the tally the route is requested through}}
    {rpt_chad		{Req Partner Address}	{Full JSON CHIP address for the foreign partner on the tally the route is requested through}}

    {dst_chad		{Destination Address}	{Full JSON CHIP address for the entity the route is searching for}}
    {native		{Native}		{The entity requesting the route is a local user}}
    {tries		{Tries}			{How many times has this route request tried without connecting to the intended peer}}
    {last		{Last Try}		{When was the last retry done}}
    {expires		{Expires}		{When this route will be considered uncertain}}
    {expired		{Expired}		{This route is uncertain because of the amount time passed since it was affirmed}}
    {state		{State}			{Indicates how/whether this route might be useable}}
    {sorter		{Priority Sort}		{A field used to prioritize routes and potential routes for being generated/retried} {
      {0		{Good}			{The route is believed good and fresh}}
      {1		{Pending}		{Route queries have recently been generated but not resolved}}
      {2		{Expired Good}		{The route was good but expiration time has passed}}
      {3		{No Route}		{No route has been generated yet on this potential pathway}}
      {4		{Expired Pending}	{A request for the route was issued but no response has been received}}
      {5		{Other}			{The route is in some other state}}
    }}
    {lading		{Lading}		{A JSON structure describing how much value can be lifted along this route and what fees might apply}}
    {json		{Route Object}		{JSON representation of the route used in peer-to-peer messages}}
}

tabtext mychips.route_tries {Route Retries}	{Tracks how many times the route state transition algorithm has tried to communicate a transition to a peer} {
    {rtry_rid		{Retry Route ID}	{Primary key of the route we are tracking retries for}}
    {last		{Last Try}		{The last time we tried}}
    {tries		{Tries}			{How many tries we are up to}}
}
