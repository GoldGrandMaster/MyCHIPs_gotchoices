@startuml

!if (%not(%variable_exists("$FONTNAME")))
!$FONTNAME = "Helvetica"
!endif

!if (%not(%variable_exists("$FONTSIZE")))
!$FONTSIZE = 11
!endif

!$ACCENT = "4af"
!$ACCENTDARK = "27d"
!$PRIMARYFONTCOLOR = "003"
!$SECONDARY = "333"
!$ARROWCOLOR = "000"
!$ARROWFONTCOLOR = "333"
!$BORDERCOLOR = "202024"
!$BOXBG = "e8e8ea"
!$LIGHTBORDERCOLOR = "cccccc"
!$LIGHTBG = "e0e0e0"
skinparam backgroundColor fff
skinparam stereotypeCBackgroundColor $ACCENTDARK

!procedure font_style()
  fontColor $PRIMARYFONTCOLOR
  fontName $FONTNAME
  fontSize $FONTSIZE
  stereotypeFontColor $SECONDARY
  stereotypeFontSize $FONTSIZE
!endprocedure

!procedure basic_style()
  backgroundColor $BOXBG
  borderColor $BORDERCOLOR
!endprocedure

!procedure light_style()
  backgroundColor $LIGHTBG
  borderColor $LIGHTBORDERCOLOR
!endprocedure

!procedure accent_style()
  backgroundColor $ACCENT
  borderColor $ACCENTDARK
!endprocedure

!procedure arrow_style()
  arrowColor $ARROWCOLOR
  arrowFontName $FONTNAME
  arrowFontColor $ARROWFONTCOLOR
  arrowFontSize $FONTSIZE
!endprocedure

' Class diagrams
skinparam circledCharacter {
  radius 8
  fontSize $FONTSIZE
  fontName $FONTNAME
}

skinparam class {
  basic_style()
  font_style()
  arrow_style()

  attributeFontColor $SECONDARY
  attributeFontSize $FONTSIZE
  attributeIconSize $FONTSIZE
}

'skinparam actorStyle awesome
skinparam actor {
  accent_style()
  font_style()
}

skinparam participant {
  basic_style()
  font_style()
}

skinparam collections {
  basic_style()
  font_style()
}

skinparam SequenceBox{
  light_style()
  font_style()
}

' Component diagrams
skinparam interface {
  accent_style()
  font_style()
}

skinparam component {
  basic_style()
  font_style()
}

'skinparam node {
'  basic_style()
'  font_style()
'}

'skinparam database {
'  basic_style()
'  font_style()
'}

skinparam queue {
  basic_style()
  font_style()
}

' Use Case diagrams

skinparam usecase {
  basic_style()
  font_style()
  arrow_style()
}

skinparam activity {
  basic_style()
  font_style()
  arrow_style()
}

skinparam sequence {
  font_style()
  arrow_style()

  lifeLineBorderColor $ACCENT
  lifeLineBackgroundColor $LIGHTBG
}

'skinparam boundary {
'  accent_style()
'  font_style()
'}

'skinparam control {
'  accent_style()
'  font_style()
'}

'skinparam entity {
'  accent_style()
'  font_style()
'}

skinparam state {
  basic_style()
  font_style()
  arrow_style()
  startColor $ACCENT
  endColor $ACCENTDARK
}

skinparam note {
  basic_style()
  font_style()
}

' Common

'skinparam cloud {
'  basic_style()
'  font_style()
'  arrow_style()
'}

'skinparam rectangle {
'  basic_style()
'  font_style()
'}

'skinparam storage {
'  basic_style()
'  font_style()
'}

@enduml
