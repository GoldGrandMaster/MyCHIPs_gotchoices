#!/usr/bin/env node
//Copyright MyCHIPs.org; See license in root of this package
// -----------------------------------------------------------------------------
//Initialize an empty database with sample testing data.  If your database is not 
//on localhost:5432, set the appropriate environment variables in ../settings.js
//TODO:
//- 
const Fs = require('fs')
const Path = require('path')
const { UserHost, UserPort, PeerHost, PeerPort, PeerAgent, DBAdmin, DBHost, DBPort, Log } = require('../settings')
var log = Log('Kickstart')
var database = process.env.MYCHIPS_DBNAME || 'mychips'
var user = DBAdmin || process.env.MYCHIPS_DBAdmin || DBAdmin || process.env.USER
//console.log("database:", database, "user:", user, "UserHost:", UserHost, "uport:", UserPort, "pport:", PeerPort, "PeerAgent:", PeerAgent)

var { dbClient } = require("wyseman")
const dbConfig = {
  database, user, log,
  host: DBHost,
  port: DBPort,
  connect: true,
  schema: Path.join(__dirname, '../../lib', 'schema.sql')
}

var db = new dbClient(dbConfig)

var queryList = []
queryList.push({q:"select base.parmset('wyseman','host',$1::text)", a:[UserHost]})
queryList.push({q:"select base.parmset('wyseman','port',$1::int)", a:[UserPort]})
//queryList.push({q:"select base.parmset('mychips','peer_agent',$1::text)", a:[PeerAgent]})
//queryList.push({q:"select base.parmset('mychips','peer_host',$1::text)", a:[PeerHost]})
//queryList.push({q:"select base.parmset('mychips','peer_port',$1::int)", a:[PeerPort]})

//Insert some sample users
var fileData = Fs.readFileSync(Path.join(__dirname, 'users.json'))
var jsonData = JSON.parse(fileData)
queryList.push({q:"select json.import($1::jsonb) as record;", a:[jsonData]})

//Used by agent-based modeler:
queryList.push({q:"select base.parmset('model', 'interval',$1::int)", a:[1000]})
queryList.push({q:"select base.parmset('model', 'addclient',$1::float)", a:[0.10]})
queryList.push({q:"select base.parmset('model', 'addvendor',$1::float)", a:[0.20]})

//Set org.json entity as the site admin:
queryList.push({q:"select base.parmset('mychips','site_ent',$1::int)", a:[100]})

//Where users connect to the SPA server:
queryList.push({q:"update mychips.users set user_host = $1, user_port=$2 where user_host is null", a:[UserHost, UserPort]})

//For testing tallies:
let q = "update mychips.users_v set peer_agent=$1, peer_host=$2, peer_port=$3 where not peer_cid isnull;"
queryList.push({q, a:[PeerAgent, PeerHost, PeerPort]})		//Get defaults from base.parm now

var pending = 0
queryList.forEach(elem=>{		//Run each of the SQL commands in sequence
  pending++
  let { q, a } = elem
//console.log("Sql:", q, a)
  db.query(q, a, (err, res) => {
    if (err) console.log("Error:", err.message, "\n  query:", q)
//console.log("res:", res)
    if (!(--pending)) db.disconnect()
  })
})
