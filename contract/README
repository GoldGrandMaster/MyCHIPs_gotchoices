All documents herein subject to:
Copyright MyCHIPs.org; See license in root of this package
-----------------------------------------------------------------------------

General:
-----------------------------------------------------------------------------
A CHIP is, at its heart, a credit agreement between two parties.  In other 
words, it is a contract--payable from one party and receivable to the other.

So one job of MyCHIPs is to organize and document these contracts.  And it
will do so just as you might imagine with any legally binding agreement.
That way, if both parties share a legal jurisdiction, their agreements could be 
enforced by that jurisdiction.  This is in addition to the expected negative 
consequence of tarnished reputation that will naturally result in the trading 
community as a result of defaulting on a contract.

This directory contains examples of contracts and their components. Normally, a 
contract would be comprised of multiple components.  The idea is, you mix and 
match various clauses together to build up a complete contract agreement that 
is acceptable to both parties.  Ideally, there would be a relatively small 
universe of "standard" contracts people recognize and get comfortable with.

Contracts can be incorporated into other contracts by referring to the contract 
key (domain, file, version and language) and a hash digest of the contract
contents.  This way the contract itself doesn't actually have to get repeated
inline.  But the terms, or effect of the contract, still are included because
they are invoked by reference.

Contract Format:
-------------------------------------------------------------------------------
A contract is represented as a JSON object with the following properties:

  - domain:	mychips.org
    The domain name of the person or organization who created and/or published 
    the contract document.  If you expect people to agree to tallies that 
    incorporate a particular contract, they will probably feel more comfortable
    with language from a source they trust.  For example, if you are asked to 
    agree to a contract from a source you don't recognize, you would want to 
    read it very carefully and/or get competent legal advice first.

  - name:	mychips/Chip_Definition
    A symbolic name for the contract.  This is independent of the language used
    in the contract.  Think of it more as a file name.  In fact, it consists of
    an optional path prefix, and a partial file name, which will be used to
    refer to the contract by URL.

  - version	1
    An integer indicating the revision of the contract.  The number 1 indicates
    this is the first publicly released version.

  - language	eng
    Use the standard, 3-letter abbreviation for the language the contract is
    rendered in.  It is very possible to have the same contract and version
    available in multiple languages.  In fact, some parties may wish to include
    the same contract in two different languages as part of a single tally.

  - digest		(SHA-256 hash)
    This contains a hash of the rest of the object so it is a little different 
    than all the other properties.  When computing the hash, the digest 
    property is removed, the object is serialized by a deterministic version of 
    JSON.stringify, and then given to the SHA256 hash routine.  Once the hash is 
    complete, the digest property is added back into the object for storage 
    and/or transmission.

  - source
    This is really a pseudo-property.  It might not be stored as part of the 
    contract object but rather represents a URL where an authoritative copy of 
    the contract object can be found.  It is automatically generated from the
    contract key fields above.  The contract publisher, and other users of the
    contract, should operate a web server which answers to the resulting 
    end-point and serves the document to any process that requests it.
    
    A contract can rightly be referred to by its JSON object property key 
    (domain, name, version, language) or by the URL form, which contains the
    very same data.  When a reference is made for binding purposes, the digest 
    should also be included as indication that the contracting parties both had 
    knowledge and access to the same document version at the time their deal 
    was struck.  And example of the URL form is:
    
    	https://mychips.org/mychips/chip_definition-1-eng?digest=A1..F9
  
  - published
    A date indicating when this contract version was published by the author.
    This must be in ISO format YYYY-MM-DD where the month is a two digit 
    number, and not a word in any particular language.  The day should also
    be a two digit number.  This exact format is important so hashes
    generated in different contexts (in the database or in a JS frontend) will 
    properly match.

  - title
    A concise title, in the target language, for the contract.  This will be
    used as a header for the contract or section when the document is rendered.

  - text
    An optional pragraph of text which will form a recital paragraph for the
    contract or section.  This consists of one or more sentences, terminated by 
    a regular punctuation mark, and being separated by a single space.  There 
    should be no line feeds or other superfluous characters in the paragraph.
    It will be parsed as HTML, so extra white space would be ignored anyway.
    The text may include a few HTML formatting tags which are limited to 
    <b>bold,</b> <i>italicized,</i> <u>underlined,</u> and a custom tag <x-r>
    used to create cross-references.
  
  - tag
    An optional character string that can be used to target cross references
    from other sections, to this one.

  - sections
    An array of JSON objects which constitute the sub-sections of this document 
    or section.  Each object contains a subset of the properties described here 
    as follows:

    - title
    - tag
    - text
    - sections
    - source
      If a source URL is specified in a subsection, it means that the specified
      contract is included by reference at this point in the containing
      document.  The digest is mandatory in this case.

Tally Agreement Layout:
-------------------------------------------------------------------------------
The tally itself is an agreement between two parties.  For clarity, we will
refer to it at this top level as the "Tally Agreement."

By inclusion or reference, the Tally Agreement should contain enough data to
clearly explain the commitments each of the parties is making to each other.

When a tally agreement is printed out, it should look something like this:

-------------------------------------------------------------------------------
This Tally Agreement is made by and between the Parties:

  Vendor: <Name of stock entity in the tally>
  Vendor ID Type: email, domain, usa, etc.
  Vendor ID: <email_address>, <domain_name>, <Tax ID Number>, etc.
  Vendor Public: <Stock entity's public trading key>

and:
  Client: <Name of the foil entity in the tally>
  Client ID Type: email, domain, usa, etc.
  Client ID: <email_address>, <domain_name>, <Tax ID Number>, etc.
  Client Public: <Foil entity's public trading key>

which Agreement is made according to the following terms and conditions:

  Stock Credit Terms:				(see doc/Tallies)
    <Enumerated list of Stock's credit terms>
  Foil Credit Terms:				(see doc/Tallies)
    <Enumerated list of Foil's credit terms>

and according to the definitions, terms, and conditions specified in the
following contract which is incorporated herein and made a part of this
Agreement:

  Contract: <publisher.domain/Tally_Contract-version-language>
  Contract Hash: <Contract digest>

this Agreement being made binding, as of:
  Tally Date: <Date the tally was signed>

by the digital signatures of the parties as follows:
  Tally Hash: <Tally digest>
  Stock Signature: <Stock's signature of tally hash>
  Foil Signature: <Foil's signature of tally hash>

<QR Code containing Tally JSON>

-------------------------------------------------------------------------------
The Tally Contract itself whould then be structured something like this:

  Recitals
  Tally_Definition		Roles of the parties
  Chip_Definition		
  Duties_Rights			Recourse / Governing law
  Representations
  Defaults
  Credit Terms			Definition of specific terms
  Sending_Value
  Free
  Ethics

-------------------------------------------------------------------------------
Building Hashes

When changes are made to contract documents, it will be necessary to
regenerate the hash for that document.  This can be done with the hashes script
as follows:

  ./hashes Free.yaml			#or
  ./hashes *.yaml

Then, you may need to re-import the documents into the database by running (in
the schema directory):

  make init

-------------------------------------------------------------------------------
